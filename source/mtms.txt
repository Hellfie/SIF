искусственный ввод
1. создаём обновляющийся каждую милисекунду цикл while 
2. когда нажат mouse5 сравниваем координату Y1 и Y2 и отнимаем от большей меньшую, то же с X1 и X2
3. сравниваем получившиеся длины X и Y, большую делим на меньшую, получившееся число используем для измерения шага, где N=большее/меньшее и каждые N шагов большей координаты делается один шаг меньшей
4. от положения курсора до места назначения рисуем из шагов линию на двумерном массиве
4.1 сюда добавляется синусоида
5. на более длинную координату накладываем ряд фибоначи (или другой способ уменьшения) и удаляем лишние элементы в массиве чтобы в линии были пробелы там где мышка должна двигаться быстрее
6. на оставшиеся точки массива ставим команды SetCursorPos с правильными паузами
7. рандомизируем скорость, место назначения (на пару пикселей), высоту синусоиды (с возможностью сделать её отрицательной), место пика синусоиды (в начале пути, в середине или в конце)
8. настроить чтобы работало на нормальных мышках


синусоида
1. берём два случайных числа, от 0 до 100 и от -1 до 1, определяем место искривления на линии и направление искривления с его степенью соответственно
2. рисуем вертикальную линию с верхней (назовём точка V) до нижней (точка N) части экрана через точку места назначения (точка B, текущее положение курсора - точка A), вычисляем угол VBA
3. делим градус угла на 90 получаем процент преобладания координаты X или Y в линии (назовём P), если градус угла больше 90 отнимаем 90 и отзеркаливаем процент: P=1-P

//пункт 4 надо починить а пока пропускать, всё должно работать без него
//4. //если градус меньше 45 или больше 135 умножаем Y*P, а X*(1-P), если градус от 45 до 135 наоборот: Y*(1-P), X*P
5. гипотетически это должно правильно корректировать направление синусоиды при диагональных координатах, test pending

формулы круга:
круг касающийся углом центра графика: R^2=(x-sqrt(R))^2+(y-sqrt(R))^2 , где R - радиус, например 2
круг касающийся низом центра графика: 4=x^2+(y-2)^2 , где R=2 а 4 это R^2

закруглённый синус y: y=sin(x)+sin(y)
закруглённый синус y под углом: y=sin(x)+sin(y)+x
закруглённый синус x под углом: x=sin(x)+sin(y)+y
закруглённый синус x под углом вверх ногами (-1): x=(sin(x)*-1)+(sin(y)*-1)+y
круги на оси X: y=sin(x)+sin(y); y=sin(x+pi)+sin(y)
//Если (х; у) - координаты некоторой точки графика, то после поворота графика на угол ф координаты этой точки будут равны (х*cos(ф) -у*sin(ф); х*sin(ф) +у*cos(ф))
гипотетически, поворот: y*2+(x*cos(pi)-y*sin(pi))+(x*sin(pi)+y*cos(pi))=(sin(x)+sin(y))
ещё поворот: rotatedX = Math.cos(angle) * (point.x - center.x) - Math.sin(angle) * (point.y-center.y) + center.x; rotatedY = Math.sin(angle) * (point.x - center.x) + Math.cos(angle) * (point.y - center.y) + center.y;
mathway.com
desmos.com/calculator
https://www.rapidtables.org/ru/tools/scatter-plot.html#

я люблю высшую математику
